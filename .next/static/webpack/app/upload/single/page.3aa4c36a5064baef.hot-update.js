"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/upload/single/page",{

/***/ "(app-pages-browser)/./lib/firebase-draft-service.ts":
/*!***************************************!*\
  !*** ./lib/firebase-draft-service.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseDraftService: () => (/* binding */ FirebaseDraftService)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/storage */ \"(app-pages-browser)/./node_modules/firebase/storage/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firebase */ \"(app-pages-browser)/./lib/firebase.ts\");\n// Firebase Draft Service - Real-time draft management with Firestore\n\n\n\nclass FirebaseDraftService {\n    /**\r\n   * Test Firebase connection\r\n   */ static async testConnection() {\n        try {\n            console.log('🔥 Testing Firebase connection...');\n            // Try to read from Firestore\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('isActive', '==', true));\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            console.log('✅ Firebase connection test successful');\n            return true;\n        } catch (error) {\n            console.error('❌ Firebase connection test failed:', error);\n            return false;\n        }\n    }\n    /**\r\n   * Clean object to remove undefined values (Firebase doesn't accept undefined)\r\n   */ static cleanObject(obj) {\n        if (obj === null || obj === undefined) {\n            return null;\n        }\n        if (Array.isArray(obj)) {\n            return obj.map((item)=>this.cleanObject(item));\n        }\n        if (typeof obj === 'object' && obj.constructor === Object) {\n            const cleaned = {};\n            for(const key in obj){\n                if (obj.hasOwnProperty(key)) {\n                    const value = obj[key];\n                    if (value !== undefined) {\n                        cleaned[key] = this.cleanObject(value);\n                    }\n                }\n            }\n            return cleaned;\n        }\n        return obj;\n    }\n    /**\r\n   * Save or update a draft in Firestore\r\n   */ static async saveDraft(data, imageFile) {\n        try {\n            console.log('🔥 Firebase saveDraft called with data:', data);\n            // Clean the formData to remove non-serializable objects like File and undefined values\n            const cleanFormData = this.cleanObject({\n                ...data.formData\n            });\n            if (cleanFormData && cleanFormData.uploadedImage) {\n                // Store only file metadata, not the actual File object\n                const file = cleanFormData.uploadedImage;\n                if (file && typeof file === 'object' && file.name) {\n                    cleanFormData.uploadedImage = {\n                        name: file.name,\n                        size: file.size,\n                        type: file.type,\n                        lastModified: file.lastModified,\n                        isFileObject: true // Flag to identify this was a file\n                    };\n                }\n            }\n            // Clean the entire draft data object to remove undefined values\n            const draftData = this.cleanObject({\n                draftId: data.draftId || this.generateDraftId(),\n                creativeFilename: data.creativeFilename || 'Untitled',\n                lastSaved: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                autoSaved: data.autoSaved || false,\n                formData: cleanFormData || {},\n                aiPopulatedFields: data.aiPopulatedFields || [],\n                version: (data.version || 0) + 1,\n                isActive: true,\n                userId: data.userId || 'anonymous' // In production, use actual user ID\n            });\n            console.log('🔥 Prepared draft data for Firebase:', draftData);\n            // Handle image upload if provided (skip if storage permission issues)\n            if (imageFile) {\n                try {\n                    const imageData = await this.uploadImage(imageFile, draftData.draftId);\n                    draftData.imageUrl = imageData.downloadUrl;\n                    draftData.imageStoragePath = imageData.storagePath;\n                    console.log('✅ Image uploaded successfully');\n                } catch (imageError) {\n                    console.warn('⚠️ Image upload failed, continuing without image:', imageError);\n                // Don't fail the entire draft save if image upload fails\n                }\n            }\n            // If draftId exists, update existing document\n            if (data.id) {\n                console.log('🔥 Updating existing draft with ID:', data.id);\n                const draftRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME, data.id);\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(draftRef, {\n                    ...draftData,\n                    lastSaved: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n                });\n                console.log('✅ Draft updated successfully:', data.id);\n                return data.id;\n            } else {\n                // Create new draft\n                console.log('🔥 Creating new draft document');\n                draftData.createdAt = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)();\n                const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME), draftData);\n                console.log('✅ New draft created with ID:', docRef.id);\n                return docRef.id;\n            }\n        } catch (error) {\n            console.error('❌ Failed to save draft to Firebase:', error);\n            console.error('Firebase error details:', error);\n            throw new Error(\"Failed to save draft: \".concat(error));\n        }\n    }\n    /**\r\n   * Get a single draft by ID\r\n   */ static async getDraft(id) {\n        try {\n            const draftRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME, id);\n            const draftSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(draftRef);\n            if (draftSnap.exists()) {\n                return {\n                    id: draftSnap.id,\n                    ...draftSnap.data()\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error('Failed to get draft:', error);\n            return null;\n        }\n    }\n    /**\r\n   * Get all active drafts for a user\r\n   */ static async getAllDrafts() {\n        let userId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'anonymous';\n        try {\n            // Simplified query to avoid needing a composite index\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('userId', '==', userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('isActive', '==', true));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const drafts = [];\n            querySnapshot.forEach((doc)=>{\n                drafts.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            // Sort by lastSaved in memory to avoid needing a composite index\n            return drafts.sort((a, b)=>{\n                var _a_lastSaved_toDate, _a_lastSaved_toDate1, _a_lastSaved, _b_lastSaved_toDate, _b_lastSaved_toDate1, _b_lastSaved;\n                const aTime = ((_a_lastSaved = a.lastSaved) === null || _a_lastSaved === void 0 ? void 0 : (_a_lastSaved_toDate1 = _a_lastSaved.toDate) === null || _a_lastSaved_toDate1 === void 0 ? void 0 : (_a_lastSaved_toDate = _a_lastSaved_toDate1.call(_a_lastSaved)) === null || _a_lastSaved_toDate === void 0 ? void 0 : _a_lastSaved_toDate.getTime()) || 0;\n                const bTime = ((_b_lastSaved = b.lastSaved) === null || _b_lastSaved === void 0 ? void 0 : (_b_lastSaved_toDate1 = _b_lastSaved.toDate) === null || _b_lastSaved_toDate1 === void 0 ? void 0 : (_b_lastSaved_toDate = _b_lastSaved_toDate1.call(_b_lastSaved)) === null || _b_lastSaved_toDate === void 0 ? void 0 : _b_lastSaved_toDate.getTime()) || 0;\n                return bTime - aTime // Desc order\n                ;\n            });\n        } catch (error) {\n            console.error('Failed to get drafts:', error);\n            return [];\n        }\n    }\n    /**\r\n   * Delete a draft (soft delete by marking as inactive)\r\n   */ static async deleteDraft(id) {\n        try {\n            const draftRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME, id);\n            // Get draft data to clean up image if needed\n            const draftSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(draftRef);\n            if (draftSnap.exists()) {\n                const draftData = draftSnap.data();\n                // Delete image from storage if exists\n                if (draftData.imageStoragePath) {\n                    await this.deleteImage(draftData.imageStoragePath);\n                }\n            }\n            // Soft delete by marking as inactive\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(draftRef, {\n                isActive: false,\n                lastSaved: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n            return true;\n        } catch (error) {\n            console.error('Failed to delete draft:', error);\n            return false;\n        }\n    }\n    /**\r\n   * Set up real-time listener for drafts\r\n   */ static onDraftsChange() {\n        let userId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'anonymous', callback = arguments.length > 1 ? arguments[1] : void 0;\n        // Simplified query to avoid needing a composite index\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('userId', '==', userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('isActive', '==', true));\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)(q, (querySnapshot)=>{\n            const drafts = [];\n            querySnapshot.forEach((doc)=>{\n                drafts.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            // Sort by lastSaved in memory to avoid needing a composite index\n            const sortedDrafts = drafts.sort((a, b)=>{\n                var _a_lastSaved_toDate, _a_lastSaved_toDate1, _a_lastSaved, _b_lastSaved_toDate, _b_lastSaved_toDate1, _b_lastSaved;\n                const aTime = ((_a_lastSaved = a.lastSaved) === null || _a_lastSaved === void 0 ? void 0 : (_a_lastSaved_toDate1 = _a_lastSaved.toDate) === null || _a_lastSaved_toDate1 === void 0 ? void 0 : (_a_lastSaved_toDate = _a_lastSaved_toDate1.call(_a_lastSaved)) === null || _a_lastSaved_toDate === void 0 ? void 0 : _a_lastSaved_toDate.getTime()) || 0;\n                const bTime = ((_b_lastSaved = b.lastSaved) === null || _b_lastSaved === void 0 ? void 0 : (_b_lastSaved_toDate1 = _b_lastSaved.toDate) === null || _b_lastSaved_toDate1 === void 0 ? void 0 : (_b_lastSaved_toDate = _b_lastSaved_toDate1.call(_b_lastSaved)) === null || _b_lastSaved_toDate === void 0 ? void 0 : _b_lastSaved_toDate.getTime()) || 0;\n                return bTime - aTime // Desc order\n                ;\n            });\n            callback(sortedDrafts);\n        }, (error)=>{\n            console.error('Real-time drafts listener error:', error);\n        });\n    }\n    /**\r\n   * Set up real-time listener for a specific draft\r\n   */ static onDraftChange(draftId, callback) {\n        const draftRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, this.COLLECTION_NAME, draftId);\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)(draftRef, (doc)=>{\n            if (doc.exists()) {\n                callback({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            } else {\n                callback(null);\n            }\n        }, (error)=>{\n            console.error('Real-time draft listener error:', error);\n        });\n    }\n    /**\r\n   * Upload image to Firebase Storage\r\n   */ static async uploadImage(file, draftId) {\n        try {\n            const storagePath = \"\".concat(this.STORAGE_PATH, \"/\").concat(draftId, \"/\").concat(file.name);\n            const imageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_2__.storage, storagePath);\n            await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.uploadBytes)(imageRef, file);\n            const downloadUrl = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.getDownloadURL)(imageRef);\n            return {\n                downloadUrl,\n                storagePath\n            };\n        } catch (error) {\n            console.error('Failed to upload image:', error);\n            throw new Error('Failed to upload image');\n        }\n    }\n    /**\r\n   * Delete image from Firebase Storage\r\n   */ static async deleteImage(storagePath) {\n        try {\n            const imageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_2__.storage, storagePath);\n            await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.deleteObject)(imageRef);\n        } catch (error) {\n            console.error('Failed to delete image:', error);\n        // Don't throw error as this is cleanup\n        }\n    }\n    /**\r\n   * Generate unique draft ID\r\n   */ static generateDraftId() {\n        return \"draft_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    /**\r\n   * Migrate existing localStorage drafts to Firebase\r\n   */ static async migrateLocalDrafts() {\n        try {\n            // Import the existing draft storage to access local drafts\n            const { DraftStorageV2 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_utils_draftStorage_v2_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ../utils/draftStorage.v2 */ \"(app-pages-browser)/./utils/draftStorage.v2.ts\"));\n            const localDrafts = DraftStorageV2.getAllDrafts();\n            console.log(\"Found \".concat(localDrafts.length, \" local drafts to migrate\"));\n            for (const localDraft of localDrafts){\n                try {\n                    const firebaseDraft = {\n                        draftId: localDraft.draftId,\n                        creativeFilename: localDraft.creativeFilename,\n                        formData: localDraft.formData,\n                        autoSaved: localDraft.autoSaved,\n                        version: 1,\n                        isActive: true\n                    };\n                    await this.saveDraft(firebaseDraft);\n                    console.log(\"Migrated draft: \".concat(localDraft.creativeFilename));\n                } catch (error) {\n                    console.error(\"Failed to migrate draft \".concat(localDraft.draftId, \":\"), error);\n                }\n            }\n            console.log('Draft migration completed');\n        } catch (error) {\n            console.error('Failed to migrate local drafts:', error);\n        }\n    }\n    /**\r\n   * Get real-time tracking statistics\r\n   */ static async getTrackingStats() {\n        let userId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'anonymous';\n        try {\n            const drafts = await this.getAllDrafts(userId);\n            const stats = {\n                totalDrafts: drafts.length,\n                autoSavedCount: drafts.filter((d)=>d.autoSaved).length,\n                manualSavedCount: drafts.filter((d)=>!d.autoSaved).length,\n                aiPopulatedCount: drafts.filter((d)=>d.aiPopulatedFields && d.aiPopulatedFields.length > 0).length\n            };\n            return stats;\n        } catch (error) {\n            console.error('Failed to get tracking stats:', error);\n            return {\n                totalDrafts: 0,\n                autoSavedCount: 0,\n                manualSavedCount: 0,\n                aiPopulatedCount: 0\n            };\n        }\n    }\n}\nFirebaseDraftService.COLLECTION_NAME = 'drafts';\nFirebaseDraftService.STORAGE_PATH = 'draft-images';\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/firebase-draft-service.ts\n"));

/***/ })

});